// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Restauracja.Models.Database;

#nullable disable

namespace Restauracja.Migrations
{
    [DbContext(typeof(RestauracjaDbContext))]
    [Migration("20241217223024_DodanieWartKonf")]
    partial class DodanieWartKonf
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Restauracja.Models.Database.Entities.AdresRestauracji", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("KodPocztowy")
                        .HasColumnType("int");

                    b.Property<string>("Miejscowosc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumerDomu")
                        .HasColumnType("int");

                    b.Property<int>("RestauracjaId")
                        .HasColumnType("int");

                    b.Property<int>("Ulica")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestauracjaId");

                    b.ToTable("AdresRestauracji");
                });

            modelBuilder.Entity("Restauracja.Models.Database.Entities.AplikacjaInformacje", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataWersji")
                        .HasColumnType("datetime2");

                    b.Property<string>("NazwaAplikacji")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("WersjaAplikacji")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("AplikacjaInformacje");
                });

            modelBuilder.Entity("Restauracja.Models.Database.Entities.DaneKontaktoweRestauracji", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumerTelefonu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RestauracjaId")
                        .HasColumnType("int");

                    b.Property<string>("StronaInternetowa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RestauracjaId")
                        .IsUnique();

                    b.ToTable("DaneKontaktoweRestauracji");
                });

            modelBuilder.Entity("Restauracja.Models.Database.Entities.DaneRestauracji", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("CzasOtwarcia")
                        .HasColumnType("time");

                    b.Property<bool>("CzyDostawa")
                        .HasColumnType("bit");

                    b.Property<bool>("CzyDriveThru")
                        .HasColumnType("bit");

                    b.Property<bool>("CzyImprezyOkolicznosciowe")
                        .HasColumnType("bit");

                    b.Property<bool>("CzyMozliwaRezerwacja")
                        .HasColumnType("bit");

                    b.Property<bool>("CzyParkinPrzyRestauracji")
                        .HasColumnType("bit");

                    b.Property<bool>("CzySalaOkolicznosciowa")
                        .HasColumnType("bit");

                    b.Property<bool>("CzyWypelnioneDaneAdres")
                        .HasColumnType("bit");

                    b.Property<bool>("CzyWypelnioneDaneDan")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("GodzinaOtwarcia")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("GodzinaZamkniecia")
                        .HasColumnType("time");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("TypLokalu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypRestauracji")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zdjecie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Restauracjas");
                });

            modelBuilder.Entity("Restauracja.Models.Database.Entities.DaniaRestauracji", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Informacje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kalorycznosc")
                        .HasColumnType("int");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RestauracjaID")
                        .HasColumnType("int");

                    b.Property<string>("Zdjecie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RestauracjaID");

                    b.ToTable("DaniaRestauracji");
                });

            modelBuilder.Entity("Restauracja.Models.Database.Entities.ParametryKonfiguracyjne", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CzyWlaczone")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataDo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataWlaczenia")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("ParametryKonfiguracyjne");
                });

            modelBuilder.Entity("Restauracja.Models.Database.Entities.AdresRestauracji", b =>
                {
                    b.HasOne("Restauracja.Models.Database.Entities.DaneRestauracji", "DaneRestauracji")
                        .WithMany("Adres")
                        .HasForeignKey("RestauracjaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DaneRestauracji");
                });

            modelBuilder.Entity("Restauracja.Models.Database.Entities.DaneKontaktoweRestauracji", b =>
                {
                    b.HasOne("Restauracja.Models.Database.Entities.DaneRestauracji", "DaneRestauracji")
                        .WithOne("DaneKontaktoweRestauracji")
                        .HasForeignKey("Restauracja.Models.Database.Entities.DaneKontaktoweRestauracji", "RestauracjaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DaneRestauracji");
                });

            modelBuilder.Entity("Restauracja.Models.Database.Entities.DaniaRestauracji", b =>
                {
                    b.HasOne("Restauracja.Models.Database.Entities.DaneRestauracji", "DaneRestauracji")
                        .WithMany("DaniaRestauracji")
                        .HasForeignKey("RestauracjaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DaneRestauracji");
                });

            modelBuilder.Entity("Restauracja.Models.Database.Entities.DaneRestauracji", b =>
                {
                    b.Navigation("Adres");

                    b.Navigation("DaneKontaktoweRestauracji")
                        .IsRequired();

                    b.Navigation("DaniaRestauracji");
                });
#pragma warning restore 612, 618
        }
    }
}
